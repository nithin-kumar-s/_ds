Lab 10

Index.html

<script>
   if('serviceWorker' in navigator){
       window.addEventListener('load',()=>{
           navigator.serviceWorker.register('sw.js')
       .then(registration =>{
           console.log('service worker is registered',registration);
       })
       .catch(err =>{
           console.log('Registration failed',err);
       })
       })
   }
</script>


Stock.html

<script>
   window.addEventListener('DOMContentLoaded',(event) => {
       let source = ["/stock.json"]
       let index = 0
       while(index < source.length){
           console.log("fetching from "+ source[index]);
           fetch(source[index])
           .then(response => response.json())
           .then(data => {
               console.log(data);
               let dat = JSON.stringify(data);
               dat1 = data;
               console.log(dat1);
               let bod = document.getElementById("body");
              // var tb = document.getElementById("tb1");
               var tb = document.getElementById("tbl");




               for(let i=0; i<dat1.length;i++)
               {
                   var tr = document.createElement('tr');
                   var td = document.createElement('td');


                   td.innerHTML = dat1[i]["date"];
                   tr.appendChild(td);
                   tb.appendChild(tr);


                   var td = document.createElement('td');


                   td.innerHTML = dat1[i]["netReceivables"];
                   tr.appendChild(td);
                   tb.appendChild(tr);


                   var td = document.createElement('td');


                   td.innerHTML = dat1[i]["cashAndCashEquivalents"];
                   tr.appendChild(td);
                   tb.appendChild(tr);


                       
               }
           })
           .catch(err => console.log('err', err));
           index+=1;
       }
   });
</script>


sw.js

(function(){
   self.addEventListener('install',event =>{
       console.log('service worker installing');
       self.skipWaiting();
   })
   self.addEventListener('activate',event=>{
       console.log('service worker activating...')
   })
   self.addEventListener('fetch',event=>{
       console.log('fetching',event.request.url);
   })
})


()


Lab 9

Index.html

<script>
   if('serviceWorker' in navigator) {
       window.addEventListener('load',()=>{
           navigator.serviceWorker.register('sw.js')
           .then(registration=>{
               console.log('service worker is registered',registration)
           })
           .catch(err=>{
               console.log('Registration failed',err);
           })
       })
   }
</script>



Gitppro.html

   <!-- Github API - https://api.github.com/users-->


   <script>
       function gitdata(){
           var url='https://api.github.com/users/'+document.getElementById('text_input').value;
           fetch(url)
           .then(response => response.json())
           .then(data =>{
               console.log(data.avatar_url)
               var im=document.getElementById("image");
               im.setAttribute("src",data.avatar_url);


               var gi=document.getElementById('para');
               gi.innerHTML=JSON.stringify(data);
           })
           .catch(function(response){
               return response.status;
               console.log(response.status);
           });;
       }
   </script>


sw.js

const { response } = require("express");


(function()
{
   //method that runs when the sw is installed for the first time
   self.addEventListener('install',event=>{
       console.log('service worker is installing');
       //loading static html into cache first


       event.waitUntil(
           caches
           .open('PWD_app')
           .then(cache=>
               cache.addAll([
                   '/git'
               ])
              
               )
       )
       self.skipWaiting();
   })


   //method that runs when the service worker is installed


   self.addEventListener('activate',event=>{
       event.waitUntil(caches.delete('PWD_app'));
       console.log('service worker is activationg');
   })




   //method that will run when the app makes fetch calls
   self.addEventListener('fetch',event=>{
       console.log('fetching',event.request.url);
       event.respondWith(
           //checking if the response is already available on the cache


           caches.match(event.request).then(async(response)=>
           {


               if(response){
                   //found response in the cache
                   return response
               }


               //loading the fetch responses into the cache


               let data=fetch(event.request);
               let data_clone=(await data).clone();
               event.waitUntil(caches.open('PWD_app').then(cache => cache.put(event.request,data_clone)));
               return data
           }
           )
       )
  
   })
})



Lab 8

Index.html

<script>
   if('serviceWorker' in navigator){
       window.addEventListener('load',()=>{
           navigator.serviceWorker.register('sw.js',{
               scope:"/"
           })
           .then(registration => {
               console.log('service worker is registered',registration);
           })
           .catch(err =>{
               console.log('service worker is not found',err);
           })
       })
   }
</script>


sw.js

const cacheName = 'site-cache-v1'
const assestsToCache = [
   "/",
   "/index.html",
]


self.addEventListener('install',(event)=>{
   event.waitUntil(
       caches.open(cacheName).then((cache) => {
           return cache.addAll(assestsToCache);
       })
   );
});


self.addEventListener('activate',(event)=>{
   event.waitUntil(
       caches.open(cacheName).then((cache) => {
           return cache.addAll(assestsToCache);
       })
   );


});


Manifest.json

{
   "name": "Login Page",
   "short_name": "Login",
   "description": "A Simple Login Page App",
   "id": "./",
   "start_url": "./",
   "scope": ".",
   "display": "standalone",
   "theme_color": "#008CBA",
   "background_color": "#008CBA",
   "orientation": "portrait",
   "display_override": ["window-controls-overlay"],
   "protocol_handlers":[
       {
           "protocol": "web+tea",
           "url": "/tea?type=%s"
       },
       {
           "protocol": "web+coffee",
           "url": "/coffee?type=%s"
       }
   ],
   "icons": [
       {
           "src": "images/icons/icon-72x72.png",
           "sizes": "72x72",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-96x96.png",
           "sizes": "96x96",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-128x128.png",
           "sizes": "128x128",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-144x144.png",
           "sizes": "144x144",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-152x152.png",
           "sizes": "152x152",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-192x192.png",
           "sizes": "192x192",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-384x384.png",
           "sizes": "384x384",
           "type": "image/png",
           "purpose": "any"
       },
       {
           "src": "images/icons/icon-512x512.png",
           "sizes": "512x512",
           "type": "image/png",
           "purpose": "any"
       }      
   ],
   "screenshots": [
       {
           "src": "images/img.png",
           "sizes": "640x320",
           "type": "image/png",
           "form_factor": "wide",
           "label1": "Powerful PWAs"
       },
       {
           "src": "images/img2.png",
           "sizes": "640x320",
           "type": "image/png",
           "form_factor": "narrow",
           "label1": "Powerful PWAs"
       }
   ],
   "splash_pages": null
}




   <link rel="manifest" href="manifest.json"/>
