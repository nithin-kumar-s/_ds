Program no 5:
Create a Spring Boot Application using Maven Plugin
- Write a REST Controller API using Spring Annotations to validate the user input for
-Product details using POST, PUT methods.
- Using Postman invoke the REST Controller to demonstrate end to end working
Product.java
package com.example.RestExample_validate;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
public class Product {
@NotNull(message="id is required")
@Min(1)
@Max(100)
private Long id;
@NotBlank(message = "Name is required")
private String name;
@Min(1)
@NotNull(message = "Price is required")
private Double price;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public Double getPrice() {
return price;
}
public void setPrice(Double price) {
this.price = price;
}
}
ProductController.java:
package com.example.RestExample_validate;
@RestController
@RequestMapping("/api/products")
public class ProductController {
private final List<Product> products = new ArrayList<>();
@PostMapping
public ResponseEntity<?> addProduct(@Valid @RequestBody Product product,
BindingResult result) {
List<String> displayErrors = new ArrayList<String>();
if (result.hasErrors()) {
List<FieldError> errors = result.getFieldErrors();
for(FieldError err:errors) {
displayErrors.add(err.getField() + ": " + err.getDefaultMessage());
System.out.println(displayErrors);
}
return ResponseEntity.badRequest().body(displayErrors);
}
products.add(product);
return ResponseEntity.status(HttpStatus.CREATED).body(product);
}
@GetMapping
public List<Product> getProduct(){
return products;
}
main class:
package com.example.RestExample_validate;
//imports
@SpringBootApplication
public class RestExampleValidateApplication {
public static void main(String[] args) {
SpringApplication.run(RestExampleValidateApplication.class, args);
}
}
